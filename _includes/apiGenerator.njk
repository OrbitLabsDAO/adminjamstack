export async function onRequest(context) {
  const { request, env, params } = context;
  const method = request.method.toUpperCase();
  switch (method) {
    case "GET":
      return handleGet(request, env, params, context);
    case "POST":
      return handlePost(request, env, params, context);
    case "PUT":
      return handlePut(request, env, params, context);
    case "DELETE":
      return handleDelete(request, env, params), context;
    default:
      return new Response("Method Not Allowede", { status: 405 });
  }
}

async function handleGet(request, env, params, context) {
  const url = new URL(request.url);
  const id = url.searchParams.get("id"); // Get 'id' from query string
  const tableName = "{{ tableName}}";

  //const tableName = "property";
  let result;

  // Handle query based on 'id' parameter
  if (id != null) {
    let query = context.env.DB.prepare(
      `SELECT * FROM ${tableName} WHERE "id" = ? and "isDeleted" = ?`
    );
    result = await query.first(id,0);
  } else {
    let query = context.env.DB.prepare(`SELECT * FROM ${tableName} where "isDeleted" = ?`);

    result = await query.all(0);
  }

  // Exclude specific fields from the result
  const excludedFields = [
    "as_isDeleted",
    "isDeleted",
    "createdAt",
    "updatedAt",
    "publishedAt",
    "deletedAt",
  ]; // Add more if needed

  // Map through the results and remove excluded fields
  const filteredResults = result.results.map((item) => {
    return Object.fromEntries(
      Object.entries(item).filter(([key]) => !excludedFields.includes(key))
    );
  });

  // Return filtered results
  return new Response(JSON.stringify({ data: filteredResults }), {
    status: 200,
  });
}

async function handlePost(request, env, params, context) {
  try {
    const data = await request.json();
    return new Response(
      JSON.stringify({ message: "POST create new ${table}", data }),
      { status: 201 }
    );
  } catch (error) {
    return new Response(JSON.stringify({ error: error.message }), {
      status: 500,
    });
  }
}

async function handlePut(request, env, params, context) {
  try {
    const { id } = params;
    const data = await request.json();
    return new Response(
      JSON.stringify({ message: "PUT update ${table} by ID", id, data }),
      { status: 200 }
    );
  } catch (error) {
    return new Response(JSON.stringify({ error: error.message }), {
      status: 500,
    });
  }
}

async function handleDelete(request, env, params, context) {
  try {
    const { id } = params;
    return new Response(
      JSON.stringify({ message: "DELETE ${table} by ID", id }),
      { status: 200 }
    );
  } catch (error) {
    return new Response(JSON.stringify({ error: error.message }), {
      status: 500,
    });
  }
}
