const bcrypt = require("bcryptjs");
const jwt = require('@tsndr/cloudflare-worker-jwt');

const   headers = {
      'Content-Type': 'application/json',
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type, Authorization',
    }

// Utility: Check if a value is null, undefined, empty, or string "null"/"undefined"
const isInvalid = (val) =>
  val === null || val === undefined || val === "" || val === "null" || val === "undefined";

// Decode and validate the JWT token
const decodeJwt = async (headers, secret) => {
  let bearer = headers.get("authorization");
  if (!bearer) return null;

  bearer = bearer.replace("Bearer ", "");
  const isValid = await jwt.verify(bearer, secret);
  if (!isValid) return null;

  return await jwt.decode(bearer);
};

export async function onRequest(context) {
  const { request, env, params } = context;
  const method = request.method.toUpperCase();

  const tableName = "{{tableName}}"; // Replace dynamically or via template engine

  // Decode JWT
  let token;
  if (method != "GET" || tableName == "adminuser") {
   token = await decodeJwt(request.headers, env.SECRET);
    if (!token) {
      return new Response(JSON.stringify({ error: "Invalid or missing token" }), {
        status: 401,
      });
    }
  }
  // Extra check for adminuser table: must include isAdmin = 1 in JWT
  
  //admin debug
  //token.isAdmin = 0;
  //console.log(tableName)
  //console.log(token)
  if (tableName === "adminuser" && token.payload.isAdmin !== 1) {
    return new Response(JSON.stringify({ error: "Admin access required" }), {
      status: 401,
    });
  }

  switch (method) {
    case "GET":
      return handleGet(request, env, params, tableName);
    case "POST":
      return handlePost(request, env, params, tableName);
    case "PUT":
      return handlePut(request, env, params, tableName);
    case "DELETE":
      return handleDelete(request, env, params, tableName);
    default:
      return new Response("Method Not Allowed", { status: 405 });
  }
}

async function handleGet(request, env, params, tableName) {
  const url = new URL(request.url);
  const id = url.searchParams.get("id");

  const schemaQuery = env.DB.prepare(`PRAGMA table_info(${tableName})`);
  const schema = await schemaQuery.all();
  const hasIsDeleted = schema.results.some((col) => col.name === "isDeleted");

  let queryStr = "";
  if (!isInvalid(id)) {
    queryStr = `SELECT * FROM ${tableName} WHERE "id" = ${id}`;
    if (hasIsDeleted) queryStr += ` AND isDeleted = 0`;
  } else {
    queryStr = `SELECT * FROM ${tableName}`;
    if (hasIsDeleted) queryStr += ` WHERE isDeleted = 0`;
  }

  const result = await env.DB.prepare(queryStr).bind().run();

  const excludedFields = ["isDeleted", "createdAt", "updatedAt", "publishedAt", "deletedAt"];
  const resultArray = Array.isArray(result.results) ? result.results : [result];

  const filteredResults = resultArray.map((item) =>
    Object.fromEntries(Object.entries(item).filter(([key]) => !excludedFields.includes(key)))
  );


  return new Response(JSON.stringify({ data: filteredResults }), {
  status: 200,
  headers: headers,
});
}

async function handlePost(request, env, params, tableName) {
  try {
    const data = await request.json();

    const keys = Object.keys(data);
    const values = Object.values(data);

    if (isInvalid(tableName) || keys.length === 0) {
      return new Response(JSON.stringify({ error: "Invalid table name or empty data" }), {
        status: 400,
      });
    }

    // Check if the data includes a password field, and hash it if present
    const passwordIndex = keys.indexOf("password");
    if (passwordIndex !== -1) {
      const plainPassword = values[passwordIndex];
      const hashedPassword = await bcrypt.hash(plainPassword, 10); // Hash the password with 10 salt rounds
      values[passwordIndex] = hashedPassword; // Replace the plain password with the hashed one
    }


    const placeholders = keys.map(() => "?").join(", ");
    const sql = `INSERT INTO ${tableName} (${keys.join(", ")}) VALUES (${placeholders})`;

    const result = await env.DB.prepare(sql).bind(...values).run();

    return new Response(JSON.stringify({ status: "ok", id: result.lastRowId }), {
      status: 201,
    });
  } catch (error) {
    return new Response(JSON.stringify({ error: error.message }), { status: 500 });
  }
}

async function handlePut(request, env, params, tableName) {
  try {
    const data = await request.json();

    if (isInvalid(data.id)) {
      return new Response(JSON.stringify({ error: "ID is required for update" }), {
        status: 400,
      });
    }

    const id = data.id;
    delete data.id;

    const keys = Object.keys(data);
    const values = Object.values(data);

    if (keys.length === 0) {
      return new Response(JSON.stringify({ error: "No data provided" }), {
        status: 400,
      });
    }

    const setClause = keys.map((key) => `"${key}" = ?`).join(", ");
    const sql = `UPDATE ${tableName} SET ${setClause} WHERE "id" = ?`;

    const result = await env.DB.prepare(sql).bind(...values, id).run();

    return new Response(JSON.stringify({ status: "ok", updatedRows: result.meta.changes }), {
      status: 200,
    });
  } catch (error) {
    return new Response(JSON.stringify({ error: error.message }), {
      status: 500,
    });
  }
}

async function handleDelete(request, env, params, tableName) {
  try {
    const data = await request.json();

    if (isInvalid(data.id)) {
      return new Response(JSON.stringify({ error: "ID is required" }), {
        status: 400,
      });
    }

    const query = `UPDATE ${tableName} SET "isDeleted" = 1 WHERE "id" = ${data.id}`;
    const result = await env.DB.prepare(query).run();

    if (result.meta.changes === 0) {
      return new Response(JSON.stringify({ error: "No record found" }), {
        status: 404,
      });
    }

    return new Response(JSON.stringify({ status: "deleted", id: data.id }), {
      status: 200,
    });
  } catch (error) {
    return new Response(JSON.stringify({ error: "Internal Server Error" }), {
      status: 500,
    });
  }
}
